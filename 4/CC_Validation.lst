
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ; CC_Validation.asm
                        ;
                        #include C:\68HCS12\registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0	; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE	equ	$0	; register base
1000                    DATASTART equ	$1000	; Start of data memory
2000                    DATAEND  equ	$2000	; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ	$2000	; Start of program memory (might be ROM)
3bff                    PREND	equ	$3BFF	; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar	equ	$EE84	; Implemented in emulator
ee86                    Putchar equ	$EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ	$EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00	; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0	; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0	; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE	equ	$0	; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ	$1000	; Start of data memory
                        DATAEND  equ	$3E00	; Stack pointer initial value (end of data RAM area)
                        PRSTART equ	$400	; Start of program memory
                        PREND	equ	$FFF	; End of program memory
                        
                        VECTORTABLE equ $3E00	; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0	; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE	equ	$0	; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ	$1000	; Start of data memory
                        DATAEND  equ	$4000	; Stack pointer initial value (end of data RAM area)
                        PRSTART equ	$8000	; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND	equ	$EF7F	; End of program memory
                        
                        VECTORTABLE equ $EF80	; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0	; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ	DATASTART ; For compatibility
2000                    RAMEND equ	DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:		equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:	equ REGBASE+$1a ;part id high
001b                    PARTIDL:	equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:	equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:	equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:		equ REGBASE+$30 ;program page register
                        
0032                    PORTK:		equ REGBASE+$32 ;port k data
0033                    DDRK:		equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:	equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:		equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:		equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:		equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:		equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:		equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:		equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:	equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:	equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:	equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:		equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:	equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:	equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:		equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:	equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:	equ REGBASE+$100 ;flash clock divider
0101                    FSEC:		equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:		equ REGBASE+$103 ;flash configuration register
0104                    FPROT:		equ REGBASE+$104 ;flash protection register
0105                    FSTAT:		equ REGBASE+$105 ;flash status register
0106                    FCMD:		equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:	equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:		equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:		equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:		equ REGBASE+$115 ;eeprom status register
0116                    ECMD:		equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:	equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:	equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:	equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:	equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:	equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:	equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:	equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:	equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:	equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:	equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:	equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:	equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:	equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:	equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:	equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:	equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:	equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:	equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:	equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:	equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:	equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:	equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:	equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:	equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:	equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:	equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:	equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:	equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:	equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:	equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:	equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:	equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:	equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:	equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:	equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:	equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:	equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:	equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:	equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:	equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:	equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:	equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:	equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:	equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:	equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:	equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:	equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:	equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:	equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:	equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:	equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:	equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:	equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:	equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:	equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:	equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:	equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:	equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:	equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:	equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:	equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:	equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:	equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:	equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:	equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:	equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:	equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:	equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:	equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:	equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:	equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:	equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:	equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:	equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:	equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:	equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:	equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:	equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:	equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:	equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:	equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:	equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:	equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:	equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:	equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:	equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:	equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:	equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:	equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:	equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:	equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:	equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:	equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:	equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:	equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:	equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:	equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:	equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:	equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:	equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:	equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:	equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:	equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:	equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:	equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:	equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:	equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:	equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:	equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:	equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:	equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:	equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:	equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:	equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:	equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:	equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:	equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:	equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:	equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:	equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:	equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:	equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:	equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:	equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:	equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:	equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:	equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:	equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:	equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:		equ REGBASE+$240 ;portt data register
0241                    PTIT:		equ REGBASE+$241 ;portt input register
0242                    DDRT:		equ REGBASE+$242 ;portt direction register
0243                    RDRT:		equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:		equ REGBASE+$244 ;portt pull device enable
0245                    PPST:		equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:		equ REGBASE+$248 ;ports data register
0249                    PTIS:		equ REGBASE+$249 ;ports input register
024a                    DDRS:		equ REGBASE+$24a ;ports direction register
024b                    RDRS:		equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:		equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:		equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:		equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:		equ REGBASE+$250 ;portm data register
0251                    PTIM:		equ REGBASE+$251 ;portm input register
0252                    DDRM:		equ REGBASE+$252 ;portm direction register
0253                    RDRM:		equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:		equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:		equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:		equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:		equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:		equ REGBASE+$258 ;portp data register
0259                    PTIP:		equ REGBASE+$259 ;portp input register
025a                    DDRP:		equ REGBASE+$25a ;portp direction register
025b                    RDRP:		equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:		equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:		equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:		equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:		equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:		equ REGBASE+$260 ;porth data register
0261                    PTIH:		equ REGBASE+$261 ;porth input register
0262                    DDRH:		equ REGBASE+$262 ;porth direction register
0263                    RDRH:		equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:		equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:		equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:		equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:		equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:		equ REGBASE+$268 ;portj data register
0269                    PTIJ:		equ REGBASE+$269 ;portj input register
026a                    DDRJ:		equ REGBASE+$26a ;portj direction register
026b                    RDRJ:		equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:		equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:		equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:		equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:		equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:	equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:	equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:	equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:	equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:	equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:	equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:	equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:	equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:	equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:	equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:	equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:	equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:	equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:	equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:	equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:	equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:	equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:	equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:	equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:	equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:	equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:	equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:	equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:	equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:	equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:	equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:	equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:	equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:	equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:	equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:	equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:	equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        ;
                        ; Author(s): Joshua Hidocos, Rian Olson, Even Green
                        ; Student Number(s): 040878695, 041073915, 040998760
                        ; Date:  Augest 11, 2023
                        ;
                        ; Purpose:      Credit Card Number Validation
                        
                        ; Address Constants - Do NOT change
1000                    STORAGE1        equ     $1000                   ; Storage starts here for original cards
1030                    FINALRESULTS    equ     $1030                   ; Final number of valid and invalid cards
2000                    PROGRAMSTART    equ     $2000                   ; Executable code starts here
                        
                        ; Hardware Configuration - Complete the Constant values
000e                    DIGIT3_PP0      equ    %1110                ; HEX Display MSB (left most digit)
0007                    DIGIT0_PP3      equ    %0111                ; Display LSB (right most digit)
                        
                        
                        ; Program Constants - Do not change these values
0006                    NUMBERSOFCARDS  equ     6                       ; Six Cards to process
0004                    NUMDIGITS       equ     4                       ; Each Card has 4 digits
                        
                        ; You may add other Constant here if needed
                        
                        
                        
                        ; DO NOT CHANGE THE DELAY_VALUE; OTHERWISE THE VALUES WILL INCORRECTLY BE DISPLAYED
                        ; IN THE SIMULATOR
0040                    DELAY_VALUE     equ     64                      ; HEX Display Multiplexing Delay
                        
1000                                    org STORAGE1                    ; Note: a Label cannot be placed
1000                    Cards                                           ; on same line as org statement
                        #include        Sec_302_CC_Numbers.txt                  ; substitute the appropriate file name here.
1000 01 01 01 05        	db	1,1,1,5
1004 07 06 03 03        	db	7,6,3,3
1008 08 08 07 07        	db	8,8,7,7
100c 07 07 08 01        	db	7,7,8,1
1010 09 08 00 03        	db	9,8,0,3
1014 06 05 00 02        	db	6,5,0,2
                        #endinclude

1018                    EndCards
                        
                        
                        ; Do not change this code.
                        ; Place your results here as you loop through your solution
1030                                    org  FINALRESULTS
1030                    InvalidResult   ds      1                       ; Count of Invalid CARDs processed
1031                    ValidResult     ds      1                       ; Count of Valid CARDs processed
1032                    Count           ds      1
                        ; end of do not change
                        
2000                                    org     ProgramStart
2000 cf 20 00                           lds     #ProgramStart           ; Stack used to protect values
                        ; --- Your code starts here
                        
2003                    MainLoop
2003 79 10 32               clr     Count
2006 79 10 31               clr     ValidResult        ; Clear the valid count
2009 79 10 30               clr     InvalidResult      ; Clear the invalid count
200c ce 10 00               ldx     #Cards             ; Load the array of card numbers
                        
200f                    LoopCard
200f 16 20 5a               jsr     Add_Odd            ; Calculate sum of odd digits
                        
                        
2012 16 20 9f               jsr     Add_Even           ; Calculate sum of even digits
2015 16 20 c0               jsr     Validate_CC        ; Validate the credit card number
                        
2018 c1 00                  cmpb    #$0
                        
201a 22 09                  bhi     ValidCard
201c b6 10 30               ldaa    InvalidResult
201f 42                     inca
2020 7a 10 30               staa    InvalidResult        ; Branch if invalid
2023 20 07                  bra     NextCard
                        
2025                    ValidCard
2025 b6 10 31               ldaa   ValidResult
2028 42                     inca
2029 7a 10 31               staa   ValidResult
                        
202c                    NextCard
202c b6 10 32               ldaa    Count
202f 42                     inca
2030 7a 10 32               staa    Count
2033 81 06                  cmpa    #NUMBERSOFCARDS
2035 27 03                  beq     Finished
2037 87                     clra
2038 20 d5                  bra     LoopCard
                        
                        
                        
                        
                        
                        ; Do not change and code below here
203a 16 20 dd           Finished        jsr     Config_HEX_Displays
203d b6 10 31           Display         ldaa    ValidResult
2040 c6 0e                              ldab    #DIGIT3_PP0             ; Select MSB
2042 16 20 ec                           jsr     Hex_Display             ; Display the value
2045 86 40                              ldaa    #DELAY_VALUE
2047 16 20 f7                           jsr     Delay_ms                ; Delay for DELAY_VALUE milliseconds
204a b6 10 30                           ldaa    InValidResult
204d c6 07                              ldab    #DIGIT0_PP3             ; Select LSB
204f 16 20 ec                           jsr     Hex_Display             ; Display the value
2052 86 40                              ldaa    #DELAY_VALUE
2054 16 20 f7                           jsr     Delay_ms                ; Eelay for DELAY_VALUE milliseconds
2057 20 e4                              bra     Display                 ; Endless loop
                        
                        
                        ; Filenames without a "C:\68HCS12\Lib\" path MUST be placed in the SOURCE FOLDER
                        #include Add_Odd.asm                            ; you write this one
                        ; Add_Odd.asm
                        
                        ; Author(s): Joshua Hidocos, Rian Olson, Even Green
                        ; Student Number(s): 040878695, 041073915, 040998760
                        ; Date:  Augest 11, 2023
                        
0009                    MAX             equ        9                ; Maximum value for loop iteration
2144                    Extract_MSB     equ        $2144            ; Memory address for MSB extraction
2149                    Extract_LSB     equ        $2149            ; Memory address for LSB extraction
2059 01                 sum             db         1
                        
205a                    Add_odd
205a 86 04                      ldaa    #NUMDIGITS                 ; Load NUMDIGITS value into A register
205c                    Start
205c c6 02                      ldab    #$2                        ; Load constant value 2 into B register
205e 18 16                      sba                                ; Subtract B from A, useful for loop counter
2060 36                         psha                               ; Push A register onto the stack
2061 a6 00                      ldaa    0,x                        ; Load value at address pointed by X + 0 into B register
2063 81 08                      cmpa    #8
2065 27 30                      beq     eight
2067 81 09                      cmpa    #9
2069 27 30                      beq     nine
206b 10 fe                      clc
206d 48                         asla
206e c6 09                      ldab    #MAX                        ; Load maximum value (9) into B register
2070 18 17                      cba                                 ; Compare B with A
2072 23 0e                      bls     Loop                        ; Branch to Loop if B <= A
2074 18 07                      daa
2076 36                 	psha                                ; Push A onto the stack
2077 16 21 44                   jsr     Extract_MSB                 ; Call subroutine at Extract_Msb address
207a 33                         pulb                                ; Pull value from stack into B register
207b b7 81                      exg     a,b                         ; Exchange A and B registers
207d 16 21 49                   jsr     Extract_LSB                 ; Call subroutine at Extract_Lsb address
2080 18 06                      aba                                 ; Add B to A, result in A
2082                    Loop
2082 08                         inx
2083 08                         inx
2084 33                 	pulb                                ; Pull value from stack into B register
2085 36                         psha                                ; Push B onto the stack
2086 b7 10                      tfr     b,a                         ; Transfer data from B to A register
2088 81 00                      cmpa    #$0                        ; Compare A with 0
208a 22 d0                      bhi     Start                       ; Branch to Start if A > 0
208c 32                         pula                                ; Pull value from stack into A register
208d 33                         pulb                                ; Pull value from stack into B register
208e 18 06                      aba                                 ; Add A and B, result in A
2090 18 07                      daa
2092 b7 06                      tfr     a,y                         ; Transfer A to Y register
2094 87                         clra                                ; Clear A register
2095 c7                         clrb                                ; Clear B register
2096 3d                         rts                                 ; Return from subroutine
                        
                                end                                 ; End of the program
                        
2097                    eight
2097 86 07                      ldaa    #7
2099 20 e7                      bra     loop
209b                    nine
209b 86 09                      ldaa    #9
209d 20 e3                      bra     loop
                        
                                
                        #endinclude

                        #include Add_Even.asm                           ; you write this one
                        ; Add_Even.asm
                        ; Author(s): Joshua Hidocos, Rian Olson, Even Green
                        ; Student Number(s): 040878695, 041073915, 040998760
                        ; Date:  Augest 11, 2023
                        
209f                    Add_Even:
209f c6 04                  LDAB    #NUMDIGITS  ; Load the length of the card number into register B
                        
20a1 37                     PSHB               ; Push the original value of B onto the stack
20a2 86 00                  LDAA   #0          ; Initialize B to hold the sum of even digits
20a4 09                     dex
20a5 09                     dex
20a6 09                     dex
20a7 09                     dex
20a8                    skip:
20a8 e6 01                  LDAB    1,x                ; Load a digit from the sequence into register A
20aa 08                     inx
20ab 08                     inx
20ac 18 06                  ABA                 ; Add it to the running sum in register A
20ae 33                     PULB                ; Restore the original value of B from the stack
20af 53                     DECB                ; Decrement B (remaining digits to process)
20b0 53                     DECB                ; Decrement B again (skipping odd digits)
20b1 37                     PSHB                ; Push the updated value of B onto the stack
20b2 b7 01                  TFR     a,b         ; Transfer the sum in A to B
20b4 87                     CLRA
20b5 32                     PULA
20b6 81 00                  CMPA    #0
20b8 36                     PSHA
20b9 b7 10                  TFR     b,a
20bb 2e eb                  BGT      skip
20bd 32                     PULA
                        
20be 87                     CLRA                ; Clear A (cleanup)
                        
20bf 3d                     RTS                 ; Return from the subroutine
                        
                            end
                        #endinclude

                        #include Validate_CC.asm                        ; you write this one
                        ; Validate_CC.asm
                        
                        ; Author(s): Joshua Hidocos, Rian Olson, Even Green
                        ; Student Number(s): 040878695, 041073915, 040998760
                        ; Date:  Augest 11, 2023
                        
20c0 b7 60              Validate_CC:    tfr     y,a
20c2 18 07                              daa
20c4 18 06                              aba              ; Add B to A and store in A (B + A -> A)
20c6 18 07                              daa
20c8 b7 01                              tfr     a,b      ; Transfer A to B and clear A
20ca 87                                 clra             ; Clear register A
20cb 34                                 pshx
20cc ce 00 0a                           ldx     #10       ; Load the value 10 into index register X
                        
20cf 18 10                              idiv              ; Divide B by X
                        
20d1 c1 00                              cmpb    #0        ; Compare the result in B with 0
20d3 27 03                              beq     TrueOp    ; Branch if equal to 0, indicating a true result
20d5 c7                                 clrb              ; Clear register B to indicate false result
                        
20d6 30                 Return:         pulx
20d7 3d                                 rts               ; Return from the subroutine
                        
20d8 c6 01              TrueOp:         ldab    #1        ; Load 1 into register B (true result)
20da 87                                 clra              ; Clear register A
20db 20 f9                              bra     Return    ; Unconditional branch to the 'Return' label
                        
                                        end
                        #endinclude

                        #include Config_HEX_Displays.asm                ; provided to you - no changes permitted
                        ; Config_HEX_Displays.asm
                        ; David Haley, Professor, 18 Mar 2013
                        ;--------------------------------------
                        ; Config_HEX_Displays                 -
                        ;    Purpose:                         -
                        ;       - To configure the ports the  -
                        ;         Dragon12-Plus HCS12 Trainer -
                        ;         Rev F. Board Ports to use   -
                        ;         the four HEX displays       -
                        ;         on Port B and P             -
                        ;                                     -
                        ;   Precondition:                     -
                        ;       - A library file that defines -
                        ;         the register mapping must   -
                        ;         be included in the source   -
                        ;         code using this subroutine  -
                        ;         because this subroutine     -
                        ;         is dependent upon the       -
                        ;         register mapping            -
                        ;                                     -
                        ;    Use:                             -
                        ; - Place Config_HEX_Displays.asm in  -
                        ;         your Source Code folder     -
                        ;                                     -
                        ;       - insert the following after  -
                        ;         your last line of source    -
                        ;         and before "end"            -
                        ;                                     -
                        ;    #include Config_HEX_Displays.asm -
                        ;                                     -
                        ;     Use:                            -
                        ;       - jsr Config_HEX_Displays     -
                        ;                                     -
                        ;    Postcondition:                   -
                        ;        - A is destroyed             -
                        ;--------------------------------------
20dd                    Config_HEX_Displays
20dd 86 ff                      ldaa    #$FF    ; port configuration value
20df 5a 03                      staa    DDRB    ; Make PORTB output - for Hex Displays' values
20e1 7a 02 5a                   staa    DDRP    ; Make PTP as output - to select correct Hex Display
20e4 3d                         rts
                        ;- --------------------------------
                        ;     End Config_HEX_Displays     -
                        ;----------------------------------
                        #endinclude

                        #include Hex_Display.asm                        ; provided to you - no changes permitted
                        ; HEX_Display.asm
                        ; Author:               D. Haley
                        ; Student Number:       Faculty
                        ; Date:                 28 Nov 2020
                        ;
                        ; Purpose:              Subroutine to display a value on a Hex Display
                        ;
                        ; Preconditions:        HEX Displays configured for Output
                        ;                       Value to Display is in Accumulator A
                        ;                       Hex Display to use is in Accumulator B
                        ;
                        ; Notes:                Select the Hex Display and then display the value;
                        ;                       otherwise, excessive flicker will occur if this order
                        ;                       of operations is not followed
                        ;
                        ; Postcondition:        X is destroyed
                        ;                       A is destroyed
                        ; Use:                             -
                        ;                       Place Hex_Display.asm in  your Source Code folder
                        ;                                     -
                        ;                       insert the following after your last line of source
                        ;                       and before "end"
                        ;
                        ;                       #include Config_HEX_Displays.asm
                        ;
                        ; Use:
                        ;                       jsr Config_HEX_Displays
                        ;                        observing Preconditions
                        ;
                        ;                 Partial Lookup table for LED segments
20e5 3f 06 5b 4f 66 6d  LEDSEG  db        $3F,$06,$5B,$4F,$66,$6D,$7D
     7d
                        ;                 0,  1,  2,  3,  4,  5,  6
                        ;
20ec                    Hex_Display
20ec ce 20 e5                   ldx     #LEDSEG         ; Point to start of lookup table
20ef a6 e4                      ldaa    a,x             ; Effective address is sum of contents of registers A and X
20f1 7b 02 58                   stab    PTP             ; Selected Hex Display (if this code is after staa PORTB
                                                        ; then ALL Hex Dislays will momentarily flicker the value)
20f4 5a 01                      staa    PORTB           ; Display value
20f6 3d                         rts
                        ; -----------------------------
                        ;        END Hex_Display      -
                        ;------------------------------
                        #endinclude

                        #include C:\68HCS12\Lib\Delay_ms.asm            ; Library File    - no changes permitted
                        ;--------------------------------------
                        ; Delay_ms.asm                        -
                        ;    Purpose:                         -
                        ;       - A millisecond delay for the -
                        ;         Dragon12-Plus HCS12 Trainer -
                        ;         Rev F. Board running at     -
                        ;         24 MHz with an 8 Mhz Crystal-
                        ;                                     -
                        ;   Source:                           -
                        ;       - Wytec User's Manual for     -
                        ;         Rev F board Revision 1.05   -
                        ;       - page 21 .asm listing        -
                        ;       - D. Haley - rewrote to       -
                        ;         include stack operations    -
                        ;       - updated 28 Feb 2013 to      -
                        ;         have Accumulator A hold the -
                        ;         number of milliseconds to   -
                        ;         delay, versus using a       -
                        ;         global label
                        ;                                     -
                        ;    Precondition:                    -
                        ;       - Stack initialized at $2000  -
                        ;       - Accumulator A loaded with   -
                        ;         number of milliseconds to   -
                        ;         delay ( 1 ms to 255 ms )    -
                        ;         e.g. Accumulator A <- #250  -
                        ;         will cause a 250 ms delay   -
                        ;                                     -
                        ;    Use:                             -
                        ;       - Place Delay_ms.asm in       -
                        ;         C:\68HCS12\Lib              -
                        ;                                     -
                        ;       - insert the following as your-
                        ;         last line of source code    -
                        ;         before "end"                -
                        ;                                     -
                        ; #include C:\68HCS12\Lib\Delay_ms.asm-
                        ;                                     -
                        ;       - to call the delay routine   -
                        ;         (example for a 250 ms delay -
                        ;                                     -
                        ;        ldaa #250                    -
                        ;        jsr Delay_ms                 -
                        ;                                     -
                        ;    Postcondition:                   -
                        ;        - A destroyed                -
                        ;        - Y destroyed                -
                        ;--------------------------------------
20f7                    Delay_ms
20f7 cd 0f a0                   ldy     #24000/6  ; 6000 x 4 = 24,000 cycles = 1ms
20fa 03                 Delay   dey               ; this instruction takes 1 cycle
20fb 26 fd                      bne     Delay     ; this instruction takes 3 cycles
20fd 43                         deca              ; Delayed 1 ms. Are we finished the total delay time?
20fe 26 f7                      bne     Delay_ms  ; No, delay again
2100 3d                         rts
                        ;- ------------------------------------
                        ;            End Delay_ms             -
                        ;--------------------------------------
                        #endinclude

                        
                                        end
                        
                        ************************* No Code Past Here ****************************

Executed: Fri Aug 11 21:26:52 2023
Total cycles: 333, Total bytes: 281
Total errors: 0, Total warnings: 0
